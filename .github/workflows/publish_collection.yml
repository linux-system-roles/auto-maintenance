name: Publish fedora.linux_system_roles collection to Ansible Galaxy

on:
  workflow_dispatch:
  schedule:
    # Run daily at 00:37 UTC
    - cron: '37 0 * * *'
jobs:
  publish_collection:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout auto-maintenance repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PUSH_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt install pandoc
          pip install --upgrade pip
          pip install --upgrade ansible-core galaxy-importer pypandoc rst2html 'zipp>=3.1.0' 'pyyaml<6,>=5.4.1'
          docker --version

      - name: Build and publish the collection
        shell: bash
        run: |
          set -euxo pipefail
          # Ensure there is no dest_path before running release_collection.py
          dest_path=/var/tmp/collection
          rm -rf "$dest_path"
          echo ::group::Build Collection
          python3 ./release_collection.py --debug --dest-path "$dest_path"
          echo ::endgroup::
          # We are up to date - exit
          if git diff --quiet; then
            echo ::info No roles have new releases - no collection will be published
            exit 0
          fi
          # A new collection has been build - find the tarball
          _tarballs=( $(find "$dest_path" -maxdepth 1 -type f -name "*.tar.gz") )
          if [ "${#_tarballs[@]}" -ne 1 ]; then
            echo ::error "Did not find exactly 1 tarball to publish: ${_tarballs[*]}"
            exit 1
          fi
          # Publish the collection
          echo ::group::Publish Collection to Galaxy
          ansible-galaxy collection publish -vv --token "${{ secrets.GALAXY_API_KEY }}" "${_tarballs[0]}"
          echo ::endgroup::
          # Push the updated collection files. This step should
          # be last since the previous steps must succeed
          echo ::group::Push updates
          git config user.name systemroller
          git config user.email "systemroller@users.noreply.github.com"
          git commit -a -m "Collection version was updated"
          git push
          echo ::endgroup::
          echo ::info Done
